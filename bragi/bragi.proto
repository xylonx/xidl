//
// Created on Sun Mar 19 2023
//
// The MIT License (MIT)
// Copyright (c) 2023 xylonx
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package bragi;

enum Provider {
    PROVIDER_UNSPECIFIED = 0;
    PROVIDER_SPOTIFY = 1;
    PROVIDER_NETEASE_MUSIC = 2;
    PROVIDER_YOUTUBE = 3;
    PROVIDER_BILIBILI = 4;
}

enum Zone {
    ZONE_UNSPECIFIED = 0;
    ZONE_TRACK = 1;
    ZONE_ARTIST = 2;
    ZONE_PLAYLIST = 3;
}

message Image {
    string url = 1;
    optional int64 width = 2;
    optional int64 length = 3;
}

message Artist {
    string id = 1;
    Provider provider = 2;
    string name = 3;
}

message ArtistDetail {
    Artist artist = 1;
    optional string description = 2;
    Image avatar = 3;
}

message Track {
    string id = 1;
    Provider provider = 2;
    string name = 3;
    repeated Artist artists = 4;
    Image cover = 5;
}

message Playlist {
    string id = 1;
    Provider provider = 2;
    string name = 3;
    repeated Artist artists = 4;
    Image cover = 5;
}

message PlaylistDetail {
    string id = 1;
    Provider provider = 2;
    string name = 3;
    repeated ArtistDetail artists = 4;
    Image cover = 5;
    optional string description = 6;
    repeated Track tracks = 7;
}

///

message Stream {
    Provider provider = 1;
    // NOTE(xylonx): maybe it is better to define quality as enum
    string quality = 2;
    string url = 3;
}

message SuggestRequest {
    repeated Provider providers = 1;
    string keyword = 2;
}

message SuggestResponse {
    message Suggestion {
        Provider provider = 1;
        string suggestion = 2;
    }
    repeated Suggestion suggestions = 1;
}

message SearchRequest {
    repeated Provider providers = 1;
    string keyword = 2;
    // page number. inc from 1
    int32 page = 3;
    // enabled search fields. nil means enabling all
    repeated Zone fields = 4;
}

message SearchResponse {
    message SearchItem {
        oneof item {
            Track track = 1;
            ArtistDetail user = 2;
            Playlist playlist = 3;
        }
    }
    repeated SearchItem items = 1;
}

message DetailRequest {
    Provider provider = 1;
    Zone zone = 2;
    string id = 3;
    // for playlist with large tracks, paginate to show it
    int32 page = 4;
}

message DetailResponse {
    message DetailItem {
        oneof item {
            PlaylistDetail playlist = 1;
        }
    }
    DetailItem item = 1;
}

message StreamRequest {
    Provider provider = 1;
    string id = 2;
}
message StreamResponse {
    message StreamItem {
        Stream audio = 1;
        optional Stream video = 2;
    }
    repeated StreamItem streams = 1;
}

service BragiService {
    rpc Suggest(SuggestRequest) returns (SuggestResponse);

    rpc Search(SearchRequest) returns (SearchResponse);

    rpc Detail(DetailRequest) returns (DetailResponse);

    rpc Stream(StreamRequest) returns (StreamResponse);
}